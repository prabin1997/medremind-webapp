nav.navbar.navbar-default
      .container
        .navbar-header
          a.navbar-brand(href='/') Medication Reminders

        div
          ul.nav.navbar-nav
            if user
              li 
                a(href='/') Index
              li 
                a(href='/appointments/create') Create Reminder
          ul.nav.navbar-nav.navbar-right
            if user
              li 
                a(href='/users/logout') Logout
            else
              li
                a(href='/users/register') Register
              li
                a(href='/users/login') Login

extends ../layout

block content
 if user
  table.table
      thead
        tr
          th Medication name
          th Medication time (UTC)
          if user.isAdmin
            th Actions
          th
      tbody
        each appointment in appointments
          tr
            td  !{appointment.name}
            td  !{appointment.time}
            if user.isAdmin
              td
                a.btn.btn-default.btn-sm(href="/appointments/" + appointment.id + "/edit") Edit
              td
                form(action="/appointments/" + appointment.id + "/delete",method="POST")
                  button.btn.btn-danger.btn-sm.delete-appointment(type='submit', data-id=appointment._id) Delete
 else
  .index-title Please login or register to use the app

block content
 if user
  h4  Welcome !{user.username}
  .appointment.container.grey-text.text-darken-1
    h6.center Medications
      .card-panel.appointment.white.row
        img(src="/img/medi.png")
        each appointment in appointments
          .appointment-details
            .appointment-name !{appointment.name}
            .appointment-time !{appointment.time}
          .med-edit
            i.material-icons(href="/appointments/" + appointment.id + "/edit") edit_outline
          .med-delete
            form(action="/appointments/" + appointment.id + "/delete",method="POST")
              i.material-icons(type='submit', data-id=appointment._id) delete_outline

      h1 Medication reminder
     .menu-open
       span
       span
       span
    nav.nav
      .menu-close
        span
        span
      ul
       if user
        li.nav-link
           a(href='/') Home
        li.nav-link
           a(href='#') About
        li.nav-link
           a(href='/users/logout') Logout
        if user.isAdmin
         li.nav-link
           a(href='/appointments/create') Create Reminder
         li.nav-link
           a(href='/users/logout') Logout
       else
        li.nav-link
          a(href='/') Home
        li.nav-link
          a(href='#') About
        li.nav-link
          a(href='/users/login') Login
        li.nav-link
          a(href='/users/register') Register
    
  h1{
    text-align: center;
  }
  .menu-open{
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 20px;
    height: 20px;
    cursor: pointer;
  }
  .menu-open span{
    display: flex;
    width: 20px;
    height: 2px;
    background-color: black;
    margin-top: 3px;
  }
  .nav{
    position: fixed;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100vh;
    background-color: white;
    border-right: 1px solid black;
    transition: 0.3s;
    box-shadow: 2px 2px 5px;
    z-index: 9999;
  }
  .nav.active{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    background-color: white;
    border-right: 1px solid black;
    transition: 0.3s;
    box-shadow: 2px 2px 5px;
    z-index: 9999;

  }
  .nav ul{
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    text-align: center;
  }
  .nav ul li{
    margin-top: 3rem;
    list-style-type: none;
    text-align: center;

  }
  .nav ul li a{
    color: black;
    text-decoration: none;
    font-size: 20px;
  }
  .menu-close{
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 18px;
    height: 18px;
    cursor: pointer;
  }
  .menu-close span{
    display: flex;
    width: 20px;
    height: 2px;
    background-color: black;
  }
  .menu-close :nth-child(1){
    position: absolute;
    left: -2px;
    top: 7px;
    transform: rotate(45deg);
  }
  .menu-close :nth-child(2){
    position: absolute;
    left: -2px;
    top: 7px;
    transform: rotate(135deg);
  }
    /* Styles for listing table */
  table.table {
    width: 100%;
  }
  table.table th,
  table.table td {
    padding: 10px;
    border-bottom: 1px solid #666;
    color: black;
  }
  table.table th {
    background: #000;
    color: #fff;
  }
  table.table td:first-child,
  table.table th:first-child {
    border-right: 1px solid #666;
  }

  .appointment{
    margin-top: 20px;
  }
  .card-panel.appointment{
    border-radius: 8px;
    padding: 10px;
    box-shadow: 0px 1px 3px rgba(90,90,90,0.1);
    display: grid;
    grid-template-columns: 2fr 6fr 1fr;
    grid-template-areas: "image details delete";
    position: relative;
  }
  .appointment img{
    grid-area: image;
    max-width: 60px;
  }
  .appointment-details{
    grid-area: details;
    margin-top: 6px;
  }
  .med-edit{
    grid-area: delete;
    position: absolute;
    bottom: 0px;
    right: 0px;
    left: 20px;
  }
  .med-edit i{
    font-size: 18px;
  }
  .med-delete{
    grid-area: delete;
    position: absolute;
    bottom: 0px;
    right: 0px;
  }
  .med-delete i{
    font-size: 18px;
  }
  .appointment-name{
    font-weight: bold;
  }
  .appointment-time{
    font-size: 0.8em;
  }

const menuOpen = document.querySelector('.menu-open');
const menuClose = document.querySelector('.menu-close');
const nav = document.querySelector('.nav');
const navLink = document.querySelectorAll('.nav-link');

menuOpen.addEventListener('click', menuTog);
menuClose.addEventListener('click', menuTog);

navLink.forEach((link) =>{
    link.addEventListener('click', menuTog);
})

function menuTog(e){
    nav.classList.toggle('active')
}


#form-group
       label(for='inputName') Name:
       input.form-control(name="name", type ='text', placeholder='Name', required='', data-parsley-maxlength='20', data-parsley-maxlength-message="This field can't have more than 20 characters", value=appointment.name)
    #form-group
       label(for='inputPhoneNumber') Phone number:
       input.form-control(name="number", type ='phoneNumber', placeholder='Phone Number', required='', value=appointment.phoneNumber)
    #form-group
       label(for='time') Medication date:
       input.form-control(name="time", type ='text', placeholder='Pick a Date', required='', value=moment(appointment.time).format('MM-DD-YYYY hh:mma'))
    #form-group
       label(for='selectNotification') Notification time:
       select#selectDelta.form-control(name="notification", required='', value=appointment.notification)
        option(selected=appointment.notification == '', value='') Select a time
        option(selected=appointment.notification == '15', value='15') 15 Minutes
        option(selected=appointment.notification == '30', value='30') 30 Minutes
        option(selected=appointment.notification == '60', value='60') 1 hour
    #form-group
       label(for='selectTimeZone')  Timezone:
       select#selectTimeZone.form-control(name='timeZone', required='', value=appointment.timeZone)
        each zone in timeZones
            option()
            option(selected=zone == appointment.timeZone, value= zone) !{zone}
    br
    input.btn.btn-primary(type='submit', value='submit')



.form-group
  label.col-sm-4.control-label(for='inputName') Medication Name *
  .col-sm-8
    input#inputName.form-control(type='text', name='name', placeholder='Name', required='', data-parsley-maxlength='20', data-parsley-maxlength-message="This field can't have more than 20 characters", value=appointment.name)
.form-group
  label.col-sm-4.control-label(for='inputPhoneNumber') Phone Number
  .col-sm-8
    input#inputPhoneNumber.form-control(type='number', name='phoneNumber', placeholder='Phone Number', required='', value=appointment.phoneNumber)
.form-group
  label.col-sm-4.control-label(for='time') Medication Date
  .col-sm-8
    input#inputDate.form-control(type='text', name='time', placeholder='Pick a Date', required='', value=moment(appointment.time).format('MM-DD-YYYY hh:mma'))
.form-group
  label.col-sm-4.control-label(for='selectNotification') Notification Time
  .col-sm-8
    select#selectDelta.form-control(name='notification', required='', value=appointment.notification)
      option(selected=appointment.notification == '', value='') Select a time
      option(selected=appointment.notification == '15', value='2') 2 Minutes
      option(selected=appointment.notification == '15', value='5') 5 Minutes
      option(selected=appointment.notification == '15', value='10') 10 Minutes
      option(selected=appointment.notification == '15', value='15') 15 Minutes
.form-group
  label.col-sm-4.control-label(for='selectTimeZone') Time Zone
  .col-sm-8
    select#selectTimeZone.form-control(name='timeZone', required='', value=appointment.timeZone)
      each zone in timeZones
        option()
        option(selected=zone == appointment.timeZone, value= zone) !{zone}

self.addEventListener('install', (event) => {
    console.info('Event: Install');

    event.waitUntil(
      caches.open("static-cache")
      .then((cache) => {
        //[] of files to cache & if any of the file not present `addAll` will fail
        return cache.addAll([
            '/',
            '/users/home',
            '/users/login',
            '/js/main.js',
            '/loader.js',
            '/css/style.css',
            '/img/med.png',
            'https://fonts.googleapis.com/icon?family=Material+Icons',
            'https://fonts.gstatic.com/s/materialicons/v48/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2',
            'https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css',
            'https://fonts.googleapis.com/css?family=Poppins&display=swap',
            'https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js'
        ])
        .then(() => {
          console.info('All files are cached');
          return self.skipWaiting(); //To forces the waiting service worker to become the active service worker
        })
        .catch((error) =>  {
          console.error('Failed to cache', error);
        })
      })
    );
  });

  // activate event
  self.addEventListener('activate', evt => {
    console.log('service worker activated');
  });
  
  // fetch event
  self.addEventListener('fetch', evt => {
    console.log('fetch event', evt);
  });

  const staticCacheName = 'site-static v1';
const assets = [
    '/',
    '/users/home',
    '/users/login',
    '/js/main.js',
    '/loader.js',
    '/css/style.css',
    '/img/med.png',
    'https://fonts.googleapis.com/icon?family=Material+Icons',
    'https://fonts.gstatic.com/s/materialicons/v50/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2',
    'https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css',
    'https://fonts.googleapis.com/css?family=Poppins&display=swap',
    'https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js'
];

// install event
self.addEventListener('install', evt => {
    //console.log('service worker installed');
    evt.waitUntil(
      caches.open(staticCacheName).then((cache) => {
        console.log('caching shell assets');
        cache.addAll(assets)
        assets.forEach(function (asset) {
            cache.add(asset);
          });
      })
    );
  });
  // activate event
  self.addEventListener('activate', evt => {
    console.log('service worker activated');
  });
  
  self.addEventListener('fetch', evt => {
    //console.log('fetch event', evt);
    evt.respondWith(
      caches.match(evt.request).then(cacheRes => {
        return cacheRes || fetch(evt.request);
      })
    );
  });

    self.addEventListener("install", event => {
    event.waitUntil(
        caches.open(staticCacheName)
            .then(cache => {
        return fetch(assets)
        .then(response => cache.put(assets, new Response(response.body)));
            })
    )
});

const staticCacheName = 'site-static v15';
const dynamicCacheName = 'site-dynamic-v14';
const assets = [
    '/',
    '/users/home',
    '/js/main.js',
    '/loader.js',
    '/css/style.css',
    '/img/med.png',
    'https://fonts.googleapis.com/icon?family=Material+Icons',
    'https://fonts.gstatic.com/s/materialicons/v50/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2',
    'https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css',
    'https://fonts.googleapis.com/css?family=Poppins&display=swap',
    'https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js'
];

// cache size limit function
const limitCacheSize = (name, size) => {
    caches.open(name).then(cache => {
      cache.keys().then(keys => {
        if(keys.length > size){
          cache.delete(keys[0]).then(limitCacheSize(name, size));
        }
      });
    });
  };

// install event
self.addEventListener("install", event => {
    event.waitUntil(
        caches.open(staticCacheName)
            .then(cache => {
        return fetch(assets)
        .then(response => cache.put(assets, new Response(response.body)));
            })
    )
});
// activate event
self.addEventListener('activate', evt => {
    //console.log('service worker activated');
    evt.waitUntil(
      caches.keys().then(keys => {
        //console.log(keys);
        return Promise.all(keys
          .filter(key => key !== staticCacheName && key !== dynamicCacheName)
          .map(key => caches.delete(key))
        );
      })
    );
  });
  
// fetch event
self.addEventListener('fetch', evt => {
    //console.log('fetch event', evt);
    evt.respondWith(
      caches.match(evt.request).then(cacheRes => {
        return cacheRes || fetch(evt.request).then(fetchRes => {
          return caches.open(dynamicCacheName).then(cache => {
            cache.put(evt.request.url, fetchRes.clone());
             // check cached items size
            limitCacheSize(dynamicCacheName, 20);
            return fetchRes;
          })
        });
      })
    );
  });